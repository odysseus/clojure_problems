(ns cljeuler.ninety-nine)

(defn one
  "Find the last element of a list"
  [ls]
  (let [l (seq ls)]
    (if (empty? (rest l))
      (first l)
      (one (rest l)))))

(defn alt-one
  "Alternate Form using recur"
  [ls]
  (let [l (seq ls)]
    (if (empty? (rest l))
      (first l)
      (recur (rest l)))))

(defn two
  "Return the second to last element of a list"
  [ls]
  (let [l (seq ls)]
    (if (= (count l) 2)
      (first l)
      (two (rest l)))))

(defn alt-two
  "Alternate form using recur"
  [ls]
  (let [l (seq ls)]
    (if (empty? (next (next ls)))
      (first ls)
      (recur (rest ls)))))

(defn three
  "Find the Kth element of a list, the first element is 1"
  [ls k]
  (loop [l (seq ls) c 1]
    (if (= k c)
      (first l)
      (recur (rest l) (inc c)))))

(defn four
  "Find the number of elements in a list"
  [ls]
    (loop [l (seq ls) c 0]
      (if (empty? l)
        c
        (recur (rest l) (inc c)))))

(defn alt-four
  "Alternative answer to 4 using plain recursion"
  [ls]
  (let [l (seq ls)]
    (if (empty? l)
      0
      (if (empty? (rest l))
        1
        (+ 1 (four (rest l)))))))

(defn five
  "Reverse a list"
  [ls]
  (let [l (seq ls)]
    (loop [[h & t :as all] l fin '()]
      (if all
        (recur t (cons h fin))
        fin))))

(defn alt-five
  "Alternative form for five"
  [ls]
  (let [l (seq ls)]
    (defn iter-five [l fin]
      (if (empty? l)
        fin
        (iter-five (rest l) (cons (first l) fin))))
    (iter-five l '())))

(defn alt-alt-five
  "Yet another way to reverse a sequence"
  [ls]
  (if (empty? ls)
    '()
    (reduce conj '() ls)))

(defn six
  "Find out whether a list is a palindrome"
  [ls]
  (let [l (seq ls)]
    (= l (five l))))

(defn seven
  "Flatten a list"
  [l]
  (if (empty? l)
    nil
    (if (not (seq? (first l)))
      (concat (cons (first l) nil) (seven (rest l)))
      (concat (seven (first l)) (seven (rest l))))))

(defn eight
  "Eliminate consecutive duplicates of list elements"
  [ls]
  (let [[head & tail :as l] (seq ls)]
    (if (empty? l)
      nil
      (if (not= head (first tail))
        (concat (cons head nil) (eight tail))
        (concat '() (eight tail))))))

; *
(defn alt-nine
  "Group consecutive elements in a list"
  [ls]
  (reverse (reduce
             #(if (= (ffirst %1) %2)
                (cons (cons %2 (first %1)) (rest %1))
                (cons (list %2) %1))
             '()
             ls)))

(defn nine
  "Alternate answer for nine using a higher order function"
  [ls]
  (partition-by #(identity %) ls))

(defn ten
  "Run a length encoding of a list using the result from problem 9"
  [ls]
  (map #(list (first %) (count %)) (nine ls)))

(defn eleven
  "Modify the answer from ten so that elements with no repetition are
  copied directly into the returned list without the (E N) encoding"
  [ls]
  (map #(if (= (count %) 1) (first %) (list (first %) (count %))) (nine ls)))

(defn twelve
  "Decode the list generated by problem 11"
  [ls]
  (flatten (map #(if (seq? %) (repeat (last %) (first %)) %) ls)))

(defn fourteen
  "Duplicate the elements of a list"
  [ls]
  (mapcat (partial repeat 2) ls))

(defn fifteen
  "Duplicate the elements of a list a given number of times"
  [ls n]
  (mapcat (partial repeat n) ls))

(defn sixteen
  "Drop every nth element from a list"
  [ls n]
  (flatten (map butlast (partition-all n ls))))

(defn seventeen
  "Split a list into two parts given the length of the first"
  [ls n]
  (cons (take n ls) (list (drop n ls))))

(defn eighteen
  "Extract a slice from a list"
  [ls a b]
  (take (- b a) (drop a ls)))

(defn nineteen
  "Rotate a list N places to the left"
  [ls n]
  (concat (drop n ls) (take n ls)))

(defn twenty
  "Remove the kth element from a list"
  [ls k]
  (concat (take k ls) (drop (inc k) ls)))

(defn twenty-one
  "Insert an element at a given position in a list"
  [ls el k]
  (concat (take k ls) (cons el (drop k ls))))

(defn twenty-two
  "Create a list containing all integers within a given range"
  [a b]
  (loop [c b ls '()]
    (if (< c a)
      ls
      (recur (dec c) (cons c ls)))))

(defn twenty-three
  "Extract a given number of randomly selected elements from a list"
  [ls n]
  (defn rele [lz] (nth ls (int (* (rand 1) (count ls)))))
    (loop [c n fin '()]
      (if (= c 0)
        fin
        (recur (dec c) (cons (rele ls) fin)))))

(defn twenty-four
  "Draw N different random numbers from the set 1..M"
  [a b n]
  (defn randn [r] (int (* (rand 1) r)))
  (defn rmv [ls k] (concat (take k ls) (drop (inc k) ls)))
  (loop [c n
         ls (range a b)
         fin '()]
    (if (= c 0)
      fin
      (let [rn (randn (count ls))]
        (recur (dec c) (rmv ls rn) (cons (nth ls rn) fin))))))

(defn twenty-five
  "Generate a random permutation of the elements of the list"
  [ls]
  (defn randn [r] (int (* (rand 1) r)))
  (defn rmv [ls k] (concat (take k ls) (drop (inc k) ls)))
  (loop [tls ls
         fin '()]
    (if (empty? tls)
      fin
      (let [rn (randn (count tls))]
        (recur (rmv tls rn) (cons (nth tls rn) fin))))))

